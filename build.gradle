apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    final javafxHome = System.env['JAVAFX_HOME']
    if (javafxHome) {
      ext.javafxJar = "${javafxHome}/rt/lib/jfxrt.jar"
      if (!(new File(ext.javafxJar).exists())) {
          // If JAVAFX_HOME/rt/lib/jfxrt.jar doesn't exist, maybe the user
          // is pointing at the directory containing jfxrt.jar itself?
          ext.javafxJar = "${javafxHome}/jfxrt.jar"
      }
    } else {
      final javaHome = System.env['JAVA_HOME']
      if (javaHome)
        ext.javafxJar = "${javaHome}/jre/lib/jfxrt.jar"
    }
    try {
      println "JavaFX runtime jar: ${ext.javafxJar}"
      dependencies {
        classpath files(ext.javafxJar)
      }
    }
    catch (MissingPropertyException mpe) {
      println """    Please set the environment variable JAVAFX_HOME
    to the directory that contains rt/lib/jfxrt.jar
    of JavaFX version ${groovyfx_requiredJavaFxVersion}."""
      System.exit 1
    }
}

ext.actualJavaFXVersion = com.sun.javafx.runtime.VersionInfo.runtimeVersion
if (! ext.actualJavaFXVersion.startsWith(groovyfx_requiredJavaFxVersion)) {
  println "    Required JavaFX version is '${groovyfx_requiredJavaFxVersion}' but actual version is '${ext.actualJavaFXVersion}'"
  System.exit 1
}


repositories {
    if (project.hasProperty('groovyfx_useMavenLocal') && Boolean.valueOf(project.groovyfx_useMavenLocal)) { mavenLocal() }
    mavenCentral()
}

dependencies {
    groovy       "org.codehaus.groovy:groovy-all:${groovyfx_groovyVersion}"
    compile      "asm:asm:${groovyfx_asmVersion}"
    compile      files(ext.javafxJar)
    testCompile  "junit:junit:${groovyfx_junitVersion}"
}

jar.baseName = 'groovyfx'

task wrap(type:Wrapper, description:"create a gradlew") {
    gradleVersion = '1.7'
}

apply {
    from 'buildSrc/scripts/demo.gradle'
    from 'buildSrc/scripts/mavenCentralDeploy.gradle'
    from 'buildSrc/scripts/docsDependencies.gradle'
    from 'buildSrc/scripts/docs.gradle'
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId')
}

uploadArchives.onlyIf {
    project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}

idea {
  module {
    excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
    excludeDirs += file('.settings/') // Eclipse settings directory.
    excludeDirs += file('bin') // Eclipse compilation directory.
    excludeDirs += file('out') // IDEA compilation directory.
    excludeDirs += file('build') // Gradle compilation directory.
  }
  project {
    ipr {
      withXml { provider ->
        final node =provider.asNode()
        final component = provider.asNode().component
        node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
        final gradleSettings = node.appendNode('component' , [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
      }
    }
  }
}
